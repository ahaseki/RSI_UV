#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 11 17:21:33 2019

@author: azrahaseki
"""
#This program calculates the molar absorbtivity coefficients and transmittances
#of bromide, nitrate, nitrite, and bisulfide given data taken from the 2002 paper
#"In situ ultraviolet spectrophotometry for high resolution and long-term 
#monitoring of nitrate, bromide and bisulfide in the ocean" by Johnson and 
#Colletti. Figure 1, the absorption spectra of bromide, bisulfide, nitrate 
#and nitrite at concentrations typical of seawater, was digitalised using 
#Digizelt.
#The unit used for absorbitivity constants is M^-1 cm^-1, path length/depth is
#cm and wavelength in nm. 


#importing useful libraries
import matplotlib.pyplot as plt
from numpy import array, zeros
import numpy as np
import pdb


#specifying depth in cm- this is not the depth the paper's measurements were 
#made in, but the depth at which transmittance is calculated
s = 100 #depth in cm

########################### prebiotic recipe ##################################
#specifying prebiotic concentrations of ions
M_fe2_prebio = 0.000100 #10-600 uM, really important
M_br_prebio = 0.0015 #1-3 mM
M_no3_prebio = 0.000001 #maximum 1 uM
M_fecl2_prebio = 0.00001
M_feso4_prebio = 0.00001
#M_no2_prebio = #not really detectable
#M_hs_prebio = #I think it's not really there because the primary source is living stuff?
#M_i_prebio = #is this photoactive enough in the UV to matter? (iodine)

######################### experimental setup ##################################
#specifying experimental/modern ocean molarities for ions. These are the values used in the
#transmittance calculation for the modern ocean
M_br_ex = 0.000840 #experimental molarity of Br- 
M_no3_ex = 0.000030 #experimental molarity of NO3-
M_no2_ex = 0.000030 #experimental molarity of N02-
M_hs_ex = 0.000000001 #experimental molarity of HS-
M_fe2_check = 0.053 #check molarity for FeCl2
M_feso4_check = 0.033 #check molarity for FeSO4

######################### data from Johnson paper #############################

#specifying molarities for ions, as given in the Johnson paper. These are typical
#molarities of the given ions in seawater.
M_br_gv = 0.000840 #given molarity of Br-, 840 uM
M_no3_gv = 0.000030 #given molarity of NO3-, 30 uM
M_no2_gv = 0.000030 #given molarity of NO2-, 30 uM
M_hs_gv = 0.000050 #given molarity of HS-, 50 uM
M_fe2_gv = 0.089 #given molarity of Fe(BF4)2
M_fecl2_gv = 0.053 #given molarity of FeCl2
M_feso4_gv = 0.033 #given molarity of FeSO4
M_so4_gv = 0.02 #given molarity of SO4, Hayon paper

def process_fontana_fe2bf4():
    """
    Purpose of this function is to process Fe(BF4)2 absorptivities from Fontana 2007 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named fontana_fe2bf4.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    #creating wavelength array for fe2+ and assigning values
    #Generated by extracting curve d from Figure XXXX of Fontana+XXXX
    data = zeros((41,2))
    data[0,:] = np.array([200, 246.1280])
    data[1,:] = np.array([205, 343.2465])
    data[2,:] = np.array([210, 372.2181])
    data[3,:] = np.array([215, 301.1851])
    data[4,:] = np.array([220, 210.4452])
    data[5,:] = np.array([225, 136.6533])
    data[6,:] = np.array([230, 101.9864])
    data[7,:] = np.array([235, 82.5126])
    data[8,:] = np.array([240, 70.2697])
    data[9,:] = np.array([245, 59.8418])
    data[10,:] = np.array([250, 48.7678])
    data[11,:] = np.array([255, 38.5900])
    data[12,:] = np.array([260, 27.1564])
    data[13,:] = np.array([265, 18.6936])
    data[14,:] = np.array([270, 12.0465])
    data[15,:] = np.array([275, 7.0568])
    data[16,:] = np.array([280, 3.1981])
    data[17,:] = np.array([285, 0.8998])
    data[18,:] = np.array([290, 0.5927])
    data[19,:] = np.array([295, 0.3549])
    data[20,:] = np.array([300, 0.2687])
    data[21,:] = np.array([305, 0.2126])
    data[22,:] = np.array([310, 0.1991])
    data[23,:] = np.array([315, 0.1948])
    data[24,:] = np.array([320, 0.1907])
    data[25,:] = np.array([325, 0.1866])
    data[26,:] = np.array([330, 0.1800])
    data[27,:] = np.array([335, 0.1787])
    data[28,:] = np.array([340, 0.1762])
    data[29,:] = np.array([345, 0.1749])
    data[30,:] = np.array([350, 0.1725])
    data[31,:] = np.array([355, 0.1725])
    data[32,:] = np.array([360, 0.1639])
    data[33,:] = np.array([365, 0.1546])
    data[34,:] = np.array([370, 0.1513])
    data[35,:] = np.array([375, 0.1525])
    data[36,:] = np.array([380, 0.1594])
    data[37,:] = np.array([385, 0.1678])
    data[38,:] = np.array([390, 0.1666])
    data[39,:] = np.array([395, 0.1450])
    data[40,:] = np.array([400, 0.1338])
    
    
    np.savetxt("./Processed-Data/fontana_fe2bf4.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="Fe(BF4)2, from Fontana2007\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")
    
 
def process_fontana_feso4():
    """
    Purpose of this function is to process FeSO4 absorptivities from Fontana 2007 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named fontana_feso4.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((41,2))
    data[0,:] = np.array([200, 200.915])
    data[1,:] = np.array([205, 152.375])
    data[2,:] = np.array([210, 143.398])
    data[3,:] = np.array([215, 141.335])
    data[4,:] = np.array([220, 139.282])
    data[5,:] = np.array([225, 136.220])
    data[6,:] = np.array([230, 133.203])
    data[7,:] = np.array([235, 127.274])
    data[8,:] = np.array([240, 120.753])
    data[9,:] = np.array([245, 109.150])
    data[10,:] = np.array([250, 97.541])
    data[11,:] = np.array([255, 79.629])
    data[12,:] = np.array([260, 65.001])
    data[13,:] = np.array([265, 51.579])
    data[14,:] = np.array([270, 41.393])
    data[15,:] = np.array([275, 35.352])
    data[16,:] = np.array([280, 33.809])
    data[17,:] = np.array([285, 36.199])
    data[18,:] = np.array([290, 39.873])
    data[19,:] = np.array([295, 43.934])
    data[20,:] = np.array([300, 46.886])
    data[21,:] = np.array([305, 47.929])
    data[22,:] = np.array([310, 47.742])
    data[23,:] = np.array([315, 46.343])
    data[24,:] = np.array([320, 43.089])
    data[25,:] = np.array([325, 38.873])
    data[26,:] = np.array([330, 33.882])
    data[27,:] = np.array([335, 29.403])
    data[28,:] = np.array([340, 23.614])
    data[29,:] = np.array([345, 19.293])
    data[30,:] = np.array([350, 15.230])
    data[31,:] = np.array([355, 12.074])
    data[32,:] = np.array([360, 10.254])
    data[33,:] = np.array([365, 7.523])
    data[34,:] = np.array([370, 5.989])
    data[35,:] = np.array([375, 4.048])
    data[36,:] = np.array([380, 2.702])
    data[37,:] = np.array([385, 2.132])
    data[38,:] = np.array([390, 1.619])
    data[39,:] = np.array([395, 1.053])
    data[40,:] = np.array([400, 0.715])
    
    np.savetxt("./Processed-Data/fontana_feso4.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="FeSO4, from Fontana2007\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")

   
def process_fontana_fecl2():
    """
    Purpose of this function is to process FeCl2 absorptivities from Fontana 2007 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named fontana_fecl2.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((41,2))
    data[0,:] = np.array([200, 152.1685])
    data[1,:] = np.array([205, 133.9050])
    data[2,:] = np.array([210, 134.3060])
    data[3,:] = np.array([215, 130.1681])
    data[4,:] = np.array([220, 128.1980])
    data[5,:] = np.array([225, 125.2416])
    data[6,:] = np.array([230, 119.4266])
    data[7,:] = np.array([235, 113.8783])
    data[8,:] = np.array([240, 105.1466])
    data[9,:] = np.array([245, 99.4607])
    data[10,:] = np.array([250, 91.0874])
    data[11,:] = np.array([255, 81.4332])
    data[12,:] = np.array([260, 63.4844])
    data[13,:] = np.array([265, 51.9381])
    data[14,:] = np.array([270, 39.5230])
    data[15,:] = np.array([275, 28.6581])
    data[16,:] = np.array([280, 21.1167])
    data[17,:] = np.array([285, 16.5944])
    data[18,:] = np.array([290, 14.0198])
    data[19,:] = np.array([295, 12.3315])
    data[20,:] = np.array([300, 12.1391])
    data[21,:] = np.array([305, 12.5423])
    data[22,:] = np.array([310, 13.8202])
    data[23,:] = np.array([315, 15.2277])
    data[24,:] = np.array([320, 17.3288])
    data[25,:] = np.array([325, 18.9412])
    data[26,:] = np.array([330, 20.3730])
    data[27,:] = np.array([335, 20.5449])
    data[28,:] = np.array([340, 20.7195])
    data[29,:] = np.array([345, 19.9078])
    data[30,:] = np.array([350, 18.5223])
    data[31,:] = np.array([355, 16.6872])
    data[32,:] = np.array([360, 14.0961])
    data[33,:] = np.array([365, 12.1009])
    data[34,:] = np.array([370, 10.0914])
    data[35,:] = np.array([375, 8.4357])
    data[36,:] = np.array([380, 6.6169])
    data[37,:] = np.array([385, 5.2808])
    data[38,:] = np.array([390, 4.1903])
    data[39,:] = np.array([395, 3.0485])
    data[40,:] = np.array([400, 2.3364])
    
    np.savetxt("./Processed-Data/fontana_fecl2.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="FeCl2, from Fontana2007\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")


def process_hayon_na2so4_acid():
    """
    Purpose of this function is to process Na2SO4 absorptivities at pH 5.5 from Hayon 1966 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named na2so4_acid.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((41,2))
    data[0,:] = np.array([200, 0])
    data[1,:] = np.array([205, 0])
    data[2,:] = np.array([210, 0])
    data[3,:] = np.array([215, 0])
    data[4,:] = np.array([220, 0])
    data[5,:] = np.array([225, 0.3179])
    data[6,:] = np.array([230, 0.3384])
    data[7,:] = np.array([235, 0.3557])
    data[8,:] = np.array([240, 0.3628])
    data[9,:] = np.array([245, 0.3568])
    data[10,:] = np.array([250, 0.3364])
    data[11,:] = np.array([255, 0.3101])
    data[12,:] = np.array([260, 0.2771])
    data[13,:] = np.array([265, 0.2446])
    data[14,:] = np.array([270, 0.2098])
    data[15,:] = np.array([275, 0.1781])
    data[16,:] = np.array([280, 0.1445])
    data[17,:] = np.array([285, 0.1200])
    data[18,:] = np.array([290, 0.1016])
    data[19,:] = np.array([295, 0.0901])
    data[20,:] = np.array([300, 0.0836])
    data[21,:] = np.array([305, 0.0798])
    data[22,:] = np.array([310, 0.0765])
    data[23,:] = np.array([315, 0.0747])
    data[24,:] = np.array([320, 0.0737])
    data[25,:] = np.array([325, 0.0724])
    data[26,:] = np.array([330, 0.0721])
    data[27,:] = np.array([335, 0.0719])
    data[28,:] = np.array([340, 0.0728])
    data[29,:] = np.array([345, 0.0738])
    data[30,:] = np.array([350, 0.0737])
    data[31,:] = np.array([355, 0.0742])
    data[32,:] = np.array([360, 0.0744])
    data[33,:] = np.array([365, 0.0743])
    data[34,:] = np.array([370, 0.0753])
    data[35,:] = np.array([375, 0.0776])
    data[36,:] = np.array([380, 0.0798])
    data[37,:] = np.array([385, 0.0836])
    data[38,:] = np.array([390, 0.0882])
    data[39,:] = np.array([395, 0.0928])
    data[40,:] = np.array([400, 0.0987])   
    
    #Convert from absorbance to absorptivities
    data[:,1] /= (63 * 0.02)
    
    np.savetxt("./Processed-Data/hayon_so4_acid.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="FeSO4 at pH 5.5, from Hayon1966\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")

def process_hayon_na2so4_base():
    """
    Purpose of this function is to process Na2SO4 absorptivities at pH 10.4 from Hayon 1966 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named na2so4_base.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((41,2))
    data[0,:] = np.array([200, 0])
    data[1,:] = np.array([205, 0])
    data[2,:] = np.array([210, 0])
    data[3,:] = np.array([215, 0])
    data[4,:] = np.array([220, 0])
    data[5,:] = np.array([225, 0])
    data[6,:] = np.array([230, 0.3782])
    data[7,:] = np.array([235, 0.3930])
    data[8,:] = np.array([240, 0.4019])
    data[9,:] = np.array([245, 0.3986])
    data[10,:] = np.array([250, 0.3875])
    data[11,:] = np.array([255, 0.3658])
    data[12,:] = np.array([260, 0.3399])
    data[13,:] = np.array([265, 0.3055])
    data[14,:] = np.array([270, 0.2642])
    data[15,:] = np.array([275, 0.2294])
    data[16,:] = np.array([280, 0.1925])
    data[17,:] = np.array([285, 0.1532])
    data[18,:] = np.array([290, 0.1196])
    data[19,:] = np.array([295, 0.0864])
    data[20,:] = np.array([300, 0.0565])
    data[21,:] = np.array([305, 0.0323])
    data[22,:] = np.array([310, 0.0204])
    data[23,:] = np.array([315, 0.0150])
    data[24,:] = np.array([320, 0.0158])
    data[25,:] = np.array([325, 0.0219])
    data[26,:] = np.array([330, 0.0304])
    data[27,:] = np.array([335, 0.0414])
    data[28,:] = np.array([340, 0.0536])
    data[29,:] = np.array([345, 0.0678])
    data[30,:] = np.array([350, 0.0792])
    data[31,:] = np.array([355, 0.0918])
    data[32,:] = np.array([360, 0.1040])
    data[33,:] = np.array([365, 0.1187])
    data[34,:] = np.array([370, 0.1309])
    data[35,:] = np.array([375, 0.1447])
    data[36,:] = np.array([380, 0.1565])
    data[37,:] = np.array([385, 0.1704])
    data[38,:] = np.array([390, 0.1822])
    data[39,:] = np.array([395, 0.1944])
    data[40,:] = np.array([400, 0.2058])    

    #Convert from absorbance to absorptivities
    data[:,1] /= (63 * 0.02)
    
    np.savetxt("./Processed-Data/hayon_so4_base.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="FeSO4 at pH 10.4, from Hayon1966\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")

def process_perkampus_kcl():
    """
    Purpose of this function is to process KCl absorptivities from Perkampus's UV-VIS Atlas of Organic Compounds (1992) into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named kcl_base.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((10,2))
    data[0,:] = np.array([200, 24.4437])
    data[1,:] = np.array([202, 19.8930])
    data[2,:] = np.array([204, 10.2611])
    data[3,:] = np.array([206, 6.3019])
    data[4,:] = np.array([208, 4.2305])
    data[5,:] = np.array([210, 2.3065])
    data[6,:] = np.array([212, 1.6235])
    data[7,:] = np.array([214, 1.2420])
    data[8,:] = np.array([216, 0.9166])
    data[9,:] = np.array([218, 0.6180])
   
    np.savetxt("./Processed-Data/perkampus_kcl.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="KCl, from Perkampus's UV-VIS Atlas of Organic Compounds (1992)\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")


def process_johnson_br():
    """
    Purpose of this function is to process Br- absorptivities from Johnson 2002 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named johnson_br.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((33,2))
    data[0,:] = np.array([200, 2.2107])
    data[1,:] = np.array([202, 2.2796])
    data[2,:] = np.array([204, 2.3037])
    data[3,:] = np.array([206, 2.2486])
    data[4,:] = np.array([208, 2.0523])
    data[5,:] = np.array([210, 1.6080])
    data[6,:] = np.array([212, 1.0914])
    data[7,:] = np.array([214, 0.6850])
    data[8,:] = np.array([216, 0.3957])
    data[9,:] = np.array([218, 0.2235])
    data[10,:] = np.array([220, 0.1236])
    data[11,:] = np.array([222, 0.0651])
    data[12,:] = np.array([224, 0.0341])
    data[13,:] = np.array([226, 0.0169])
    data[14,:] = np.array([228, 0.0066])
    data[15,:] = np.array([230, 0.0066])
    data[16,:] = np.array([232, 0.0031])
    data[17,:] = np.array([234, 0.0031])
    data[18,:] = np.array([236, 0.0003])
    data[19,:] = np.array([238, 0.0003])
    data[20,:] = np.array([240, 0.0000])
    data[21,:] = np.array([242, 0.0000])
    data[22,:] = np.array([244, 0.0000])
    data[23,:] = np.array([246, 0.0000])
    data[24,:] = np.array([248, 0.0000])
    data[25,:] = np.array([250, 0.000])
    data[26,:] = np.array([252, 0.000])
    data[27,:] = np.array([254, 0.000])
    data[28,:] = np.array([256, 0.000])
    data[29,:] = np.array([258, 0.000])
    data[30,:] = np.array([260, 0.000])
    data[31,:] = np.array([262, 0.000])
    data[32,:] = np.array([264, 0.000])
    
    #Convert from absorbance to absorptivities
    data[:,1] /= (840e-6) #molarity was 840 uM, path length 1 cm
    
    np.savetxt("./Processed-Data/johnson_br.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="Br- from Johnson 2002\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")

 
def process_johnson_no3():
    """
    Purpose of this function is to process NO3- absorptivities from Johnson 2002 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named johnson_no3.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((33,2))
    data[0,:] = np.array([200, 0.293043])
    data[1,:] = np.array([202, 0.295540])
    data[2,:] = np.array([204, 0.292210])
    data[3,:] = np.array([206, 0.283885])
    data[4,:] = np.array([208, 0.270565])
    data[5,:] = np.array([210, 0.253082])
    data[6,:] = np.array([212, 0.228939])
    data[7,:] = np.array([214, 0.202299])
    data[8,:] = np.array([216, 0.174826])
    data[9,:] = np.array([218, 0.145688])
    data[10,:] = np.array([220, 0.119853])
    data[11,:] = np.array([222, 0.093240])
    data[12,:] = np.array([224, 0.071595])
    data[13,:] = np.array([226, 0.053279])
    data[14,:] = np.array([228, 0.039127])
    data[15,:] = np.array([230, 0.028304])
    data[16,:] = np.array([232, 0.018314])
    data[17,:] = np.array([234, 0.012486])
    data[18,:] = np.array([236, 0.009156])
    data[19,:] = np.array([238, 0.003329])
    data[20,:] = np.array([240, 0.000831])
    data[21,:] = np.array([242, 0.000001])
    data[22,:] = np.array([244, 0.000001])
    data[23,:] = np.array([246, 0.000001])
    data[24,:] = np.array([248, 0.000001])
    data[25,:] = np.array([250, 0.000001])
    data[26,:] = np.array([252, 0.000001])
    data[27,:] = np.array([254, 0.000001])
    data[28,:] = np.array([256, 0.000001])
    data[29,:] = np.array([258, 0.000001])
    data[30,:] = np.array([260, 0.000001])
    data[31,:] = np.array([262, 0.000001])
    data[32,:] = np.array([264, 0.000001])
    
    #Convert from absorbance to absorptivities
    data[:,1] /= (30e-6) #molarity was 30 uM, path length 1 cm
    
    np.savetxt("./Processed-Data/johnson_no3.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="NO3- from Johnson 2002\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")
 
    
def process_mack_no3():
    """
    Purpose of this function is to process NO3- absorptivities from Mack 1999 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named mack_no3.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((51,2))
    data[0,:] = np.array([201, 9929.50])
    data[1,:] = np.array([205, 9660.85])
    data[2,:] = np.array([207, 9263.73])
    data[3,:] = np.array([209, 8697.24])
    data[4,:] = np.array([210, 8241.71])
    data[5,:] = np.array([211, 7751.14])
    data[6,:] = np.array([212, 7272.25])
    data[7,:] = np.array([213, 6799.20])
    data[8,:] = np.array([214, 6372.87])
    data[9,:] = np.array([216, 5794.70])
    data[10,:] = np.array([217, 5105.57])
    data[11,:] = np.array([218, 4449.41])
    data[12,:] = np.array([219, 3923.52])
    data[13,:] = np.array([220, 3369.36])
    data[14,:] = np.array([222, 2837.82])
    data[15,:] = np.array([223, 2402.40])
    data[16,:] = np.array([225, 1899.14 ])
    data[17,:] = np.array([227, 1390.21])
    data[18,:] = np.array([229, 920.87])
    data[19,:] = np.array([232, 451.53])
    data[20,:] = np.array([237, 180.11])
    data[21,:] = np.array([241, 44.39])
    data[22,:] = np.array([250, 12.6102])
    data[23,:] = np.array([251, 10.0429])
    data[24,:] = np.array([253, 7.4756])
    data[25,:] = np.array([254, 5.2384])
    data[26,:] = np.array([256, 3.0746])
    data[27,:] = np.array([260, 1.5709])
    data[28,:] = np.array([265, 1.2408])
    data[29,:] = np.array([270, 1.5342])
    data[30,:] = np.array([275, 2.1577])
    data[31,:] = np.array([280, 3.0012])
    data[32,:] = np.array([285, 4.0281])
    data[33,:] = np.array([290, 5.0551])
    data[34,:] = np.array([295, 5.9860])
    data[35,:] = np.array([300, 6.8197])
    data[36,:] = np.array([305, 6.9499])
    data[37,:] = np.array([310, 6.5071])
    data[38,:] = np.array([315, 5.2827])
    data[39,:] = np.array([320, 3.7457])
    data[40,:] = np.array([325, 2.3390])
    data[41,:] = np.array([330, 1.1406])
    data[42,:] = np.array([335, 0.4633])
    data[43,:] = np.array([340, 0.1247])
    data[44,:] = np.array([345, 0.0877])
    data[45,:] = np.array([350, 0.0877])
    data[46,:] = np.array([355, 0.0877])
    data[47,:] = np.array([360, 0.0877])
    data[48,:] = np.array([365, 0.0877])
    data[49,:] = np.array([370, 0.0877])
    data[50,:] = np.array([375, 0.0877])
    
    
    np.savetxt("./Processed-Data/mack_no3.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="NO3- from Mack 1999\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")
    
def process_johnson_no2():
    """
    Purpose of this function is to process NO2- absorptivities from Johnson 2002 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named johnson_no3.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((33,2))
    data[0,:] = np.array([200, 0.130540])
    data[1,:] = np.array([202, 0.139085])
    data[2,:] = np.array([204, 0.146918])
    data[3,:] = np.array([206, 0.154039])
    data[4,:] = np.array([208, 0.159024])
    data[5,:] = np.array([210, 0.159736])
    data[6,:] = np.array([212, 0.157600])
    data[7,:] = np.array([214, 0.150992])
    data[8,:] = np.array([216, 0.144782])
    data[9,:] = np.array([218, 0.133388])
    data[10,:] = np.array([220, 0.121994])
    data[11,:] = np.array([222, 0.107752])
    data[12,:] = np.array([224, 0.092798])
    data[13,:] = np.array([226, 0.078556])
    data[14,:] = np.array([228, 0.064314])
    data[15,:] = np.array([230, 0.052208])
    data[16,:] = np.array([232, 0.040102])
    data[17,:] = np.array([234, 0.030845])
    data[18,:] = np.array([236, 0.023724])
    data[19,:] = np.array([238, 0.015891])
    data[20,:] = np.array([240, 0.010906])
    data[21,:] = np.array([242, 0.007346])
    data[22,:] = np.array([244, 0.005209])
    data[23,:] = np.array([246, 0.003785])
    data[24,:] = np.array([248, 0.003785])
    data[25,:] = np.array([250, 0.003785])
    data[26,:] = np.array([252, 0.001649])
    data[27,:] = np.array([254, 0.001649])
    data[28,:] = np.array([256, 0.000224])
    data[29,:] = np.array([258, 0.000224])
    data[30,:] = np.array([260, 0.000224])
    data[31,:] = np.array([262, 0.000224])
    data[32,:] = np.array([264, 0.000224])

    #Convert from absorbance to absorptivities
    data[:,1] /= (30e-6) #molarity was 30 uM, path length 1 cm
    
    np.savetxt("./Processed-Data/johnson_no2.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="NO2- from Johnson 2002\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")
 
def process_mack_no2():
    """
    Purpose of this function is to process NO2- absorptivities from Mack 1999 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named mack_no2.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((56,2))
    data[0,:] = np.array([201, 4758.1106])
    data[1,:] = np.array([205, 5272.1375])
    data[2,:] = np.array([210, 5492.2346])
    data[3,:] = np.array([215, 4948.7295])
    data[4,:] = np.array([218, 4422.2441])
    data[5,:] = np.array([220, 3902.1454])
    data[6,:] = np.array([223, 3264.9382])
    data[7,:] = np.array([225, 2725.3000])
    data[8,:] = np.array([227, 2111.8504])
    data[9,:] = np.array([230, 1521.5036])
    data[10,:] = np.array([233, 1114.0501])
    data[11,:] = np.array([235, 771.3768])
    data[12,:] = np.array([238, 502.8974])
    data[13,:] = np.array([240, 295.3334])
    data[14,:] = np.array([245, 102.8932])
    data[15,:] = np.array([250, 6.6731])
    data[16,:] = np.array([255, 10.7893])
    data[17,:] = np.array([256, 8.9570])
    data[18,:] = np.array([258, 7.4344])
    data[19,:] = np.array([262, 6.5570])
    data[20,:] = np.array([268, 6.8667])
    data[21,:] = np.array([272, 7.4861])
    data[22,:] = np.array([278, 8.0022])
    data[23,:] = np.array([284, 8.5183])
    data[24,:] = np.array([290, 8.6323])
    data[25,:] = np.array([295, 8.8158])
    data[26,:] = np.array([300, 8.9068])
    data[27,:] = np.array([305, 9.0887])
    data[28,:] = np.array([310, 9.4891])
    data[29,:] = np.array([315, 10.0713])
    data[30,:] = np.array([320, 11.0539])
    data[31,:] = np.array([325, 12.4004])
    data[32,:] = np.array([330, 14.0775])
    data[33,:] = np.array([332, 15.1453])
    data[34,:] = np.array([335, 16.3678])
    data[35,:] = np.array([337, 17.4415])
    data[36,:] = np.array([340, 18.6397])
    data[37,:] = np.array([342, 19.6092])
    data[38,:] = np.array([345, 20.6127])
    data[39,:] = np.array([350, 22.1223])
    data[40,:] = np.array([355, 22.3914])
    data[41,:] = np.array([360, 21.6889])
    data[42,:] = np.array([363, 20.7220])
    data[43,:] = np.array([365, 19.5515])
    data[44,:] = np.array([368, 18.0530])
    data[45,:] = np.array([370, 16.3977])
    data[46,:] = np.array([373, 14.8952])
    data[47,:] = np.array([375, 13.4981])
    data[48,:] = np.array([377, 11.5634])
    data[49,:] = np.array([380, 9.7016])
    data[50,:] = np.array([382, 8.0575])
    data[51,:] = np.array([385, 6.4505])
    data[52,:] = np.array([387, 5.0986])
    data[53,:] = np.array([390, 3.7035])
    data[54,:] = np.array([392, 2.7116])
    data[55,:] = np.array([395, 1.8479])

    
    np.savetxt("./Processed-Data/mack_no2.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="NO2- from Mack 1999\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")

def process_guenther_i():
    """
    Purpose of this function is to process I- absorptivities from Guenther 2001 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named guenther_i.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    data = zeros((37,2))
    data[0,:] = np.array([206, 0.25020])
    data[1,:] = np.array([208, 0.21538])
    data[2,:] = np.array([210, 0.19745])
    data[3,:] = np.array([212, 0.21672])
    data[4,:] = np.array([213, 0.24846])
    data[5,:] = np.array([215, 0.28534])
    data[6,:] = np.array([216, 0.33150])
    data[7,:] = np.array([217, 0.37877])
    data[8,:] = np.array([218, 0.41725])
    data[9,:] = np.array([219, 0.47073])
    data[10,:] = np.array([221, 0.53338])
    data[11,:] = np.array([223, 0.59482])
    data[12,:] = np.array([225, 0.64236])
    data[13,:] = np.array([228, 0.63398])
    data[14,:] = np.array([230, 0.60361])
    data[15,:] = np.array([231, 0.57050])
    data[16,:] = np.array([233, 0.52390])
    data[17,:] = np.array([235, 0.40371])
    data[18,:] = np.array([237, 0.35712])
    data[19,:] = np.array([238, 0.30107])
    data[20,:] = np.array([240, 0.24798])
    data[21,:] = np.array([241, 0.20812])
    data[22,:] = np.array([242, 0.16837])
    data[23,:] = np.array([244, 0.12454])
    data[24,:] = np.array([246, 0.08576])
    data[25,:] = np.array([248, 0.05668])
    data[26,:] = np.array([251, 0.03471])
    data[27,:] = np.array([253, 0.01920])
    data[28,:] = np.array([255, 0.00691])
    data[29,:] = np.array([257, 0.00239])
    data[30,:] = np.array([259, 0.00174])
    data[31,:] = np.array([261, 0.00])
    data[32,:] = np.array([264, 0.00])
    data[33,:] = np.array([268, 0.00])
    data[34,:] = np.array([272, 0.00])
    data[35,:] = np.array([275, 0.00])
    data[36,:] = np.array([279, 0.00])

    #Convert from absorbance to absorptivities
    data[:,1] /= (50e-6) #molarity was 50 uM, path length 1 cm
    
    np.savetxt("./Processed-Data/guenther_i.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="I- from Guenther 2001\nWavelength (nm), Molar Absorptivities (M^-1 cm^-1)")
         
def process_smithbaker_purest():
    """
    Purpose of this function is to process absorptivities from Smith and Baker 1981 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named smithbaker_purest.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of cm^-1#
    """
    data = zeros((21,2))
    data[0,:] = np.array([200, 3.14])
    data[1,:] = np.array([210, 2.05])
    data[2,:] = np.array([220, 1.36])
    data[3,:] = np.array([230, 0.968])
    data[4,:] = np.array([240, 0.754])
    data[5,:] = np.array([250, 0.588])
    data[6,:] = np.array([260, 0.481])
    data[7,:] = np.array([270, 0.394])
    data[8,:] = np.array([280, 0.306])
    data[9,:] = np.array([290, 0.230])
    data[10,:] = np.array([300, 0.154])
    data[11,:] = np.array([310, 0.116])
    data[12,:] = np.array([320, 0.0944])
    data[13,:] = np.array([330, 0.0765])
    data[14,:] = np.array([340, 0.0637])
    data[15,:] = np.array([350, 0.0530])
    data[16,:] = np.array([360, 0.0439])
    data[17,:] = np.array([370, 0.0353])
    data[18,:] = np.array([380, 0.0267])
    data[19,:] = np.array([390, 0.0233])
    data[20,:] = np.array([400, 0.0209])
    
    #Convert from m^-1 to cm^-1
    data[:,1] /= 100 
    
    np.savetxt("./Processed-Data/smithbaker_purest.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="UV absorptivity of the 'purest' natural waters from Smith and Baker 1981\nWavelength (nm), Molar Absorptivity (cm^-1)")

def process_quickenden_purewater():
    """
    Purpose of this function is to process absorptivities from Quickenden 1980 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named quickenden.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of cm^-1#
    """
#assigning absorbtivity values taken from Quikenden paper, units 10^-2 m^-1
    data = zeros((125,2))
    data[0,:] = np.array([196, 126.0])
    data[1,:] = np.array([197, 85.2])
    data[2,:] = np.array([198, 56.7])
    data[3,:] = np.array([199, 41.1])
    data[4,:] = np.array([200, 32.4])
    data[5,:] = np.array([201, 26.4])
    data[6,:] = np.array([202, 23.0])
    data[7,:] = np.array([203, 19.2])
    data[8,:] = np.array([204, 16.8])
    data[9,:] = np.array([205, 15.6])
    data[10,:] = np.array([206, 15.0])
    data[11,:] = np.array([207, 14.0])
    data[12,:] = np.array([208, 13.4])
    data[13,:] = np.array([209, 12.5])
    data[14,:] = np.array([210, 12.6])
    data[15,:] = np.array([211, 11.7])
    data[16,:] = np.array([212, 11.4 ])
    data[17,:] = np.array([213, 11.0])
    data[18,:] = np.array([214, 10.6])
    data[19,:] = np.array([215, 10.1])
    data[20,:] = np.array([216, 9.88])
    data[21,:] = np.array([217, 9.46])
    data[22,:] = np.array([218, 9.31])
    data[23,:] = np.array([219, 9.18])
    data[24,:] = np.array([220, 8.05])
    data[25,:] = np.array([221, 7.86])
    data[26,:] = np.array([222, 7.37])
    data[27,:] = np.array([223, 7.14])
    data[28,:] = np.array([224, 7.00])
    data[29,:] = np.array([225, 6.50])
    data[30,:] = np.array([226, 6.69])
    data[31,:] = np.array([227, 6.43])
    data[32,:] = np.array([228, 6.15])
    data[33,:] = np.array([229, 6.00])
    data[34,:] = np.array([230, 5.95])
    data[35,:] = np.array([231, 5.78])
    data[36,:] = np.array([232, 5.42])
    data[37,:] = np.array([233, 5.34])
    data[38,:] = np.array([234, 5.35])
    data[39,:] = np.array([235, 5.42])
    data[40,:] = np.array([236, 5.10])
    data[41,:] = np.array([237, 4.93])
    data[42,:] = np.array([238, 4.52])
    data[43,:] = np.array([239, 4.71])
    data[44,:] = np.array([240, 4.83])
    data[45,:] = np.array([241, 4.68])
    data[46,:] = np.array([242, 4.39])
    data[47,:] = np.array([243, 4.19])
    data[48,:] = np.array([244, 4.05])
    data[49,:] = np.array([245, 3.92])
    data[50,:] = np.array([246, 3.99])
    data[51,:] = np.array([247, 4.01])
    data[52,:] = np.array([248, 3.92])
    data[53,:] = np.array([249, 3.90])
    data[54,:] = np.array([250, 3.76])
    data[55,:] = np.array([251, 3.36])
    data[56,:] = np.array([252, 3.51])
    data[57,:] = np.array([253, 3.59])
    data[58,:] = np.array([254, 3.48])
    data[59,:] = np.array([255, 3.26])
    data[60,:] = np.array([256, 3.23])
    data[61,:] = np.array([257, 3.23])
    data[62,:] = np.array([258, 3.06])
    data[63,:] = np.array([259, 3.28])
    data[64,:] = np.array([260, 3.08])
    data[65,:] = np.array([261, 3.31])
    data[66,:] = np.array([262, 2.79])
    data[67,:] = np.array([263, 2.85])
    data[68,:] = np.array([264, 2.73])
    data[69,:] = np.array([265, 2.51])
    data[70,:] = np.array([266, 2.64])
    data[71,:] = np.array([267, 2.36])
    data[72,:] = np.array([268, 2.33])
    data[73,:] = np.array([269, 2.39])
    data[74,:] = np.array([270, 2.36])
    data[75,:] = np.array([271, 2.34])
    data[76,:] = np.array([272, 1.96])
    data[77,:] = np.array([273, 2.14])
    data[78,:] = np.array([274, 2.25])
    data[79,:] = np.array([275, 2.16])
    data[80,:] = np.array([276, 1.98])
    data[81,:] = np.array([277, 2.15])
    data[82,:] = np.array([278, 2.08])
    data[83,:] = np.array([279, 2.09])
    data[84,:] = np.array([280, 2.22])
    data[85,:] = np.array([281, 2.13])
    data[86,:] = np.array([282, 1.80])
    data[87,:] = np.array([283, 1.77])
    data[88,:] = np.array([284, 1.85])
    data[89,:] = np.array([285, 1.78])
    data[90,:] = np.array([286, 1.75])
    data[91,:] = np.array([287, 1.64])
    data[92,:] = np.array([288, 1.68])
    data[93,:] = np.array([289, 1.59])
    data[94,:] = np.array([290, 1.63])
    data[95,:] = np.array([291, 1.60])
    data[96,:] = np.array([292, 1.57])
    data[97,:] = np.array([293, 1.60])
    data[98,:] = np.array([294, 1.51])
    data[99,:] = np.array([295, 1.45])
    data[100,:] = np.array([296, 1.44])
    data[101,:] = np.array([297, 1.23])
    data[102,:] = np.array([298, 1.14])
    data[103,:] = np.array([299, 1.24])
    data[104,:] = np.array([300, 1.24])
    data[105,:] = np.array([301, 1.46])
    data[106,:] = np.array([302, 1.08])
    data[107,:] = np.array([303, 1.38])
    data[108,:] = np.array([304, 1.27])
    data[109,:] = np.array([305, 1.12])
    data[110,:] = np.array([306, 1.22])
    data[111,:] = np.array([307, 1.16])
    data[112,:] = np.array([308, 1.04])
    data[113,:] = np.array([309, 1.25])
    data[114,:] = np.array([310, 1.12])
    data[115,:] = np.array([311, 1.30])
    data[116,:] = np.array([312, 1.19])
    data[117,:] = np.array([313, 1.13])
    data[118,:] = np.array([314, 1.01])
    data[119,:] = np.array([315, 1.05])
    data[120,:] = np.array([316, 0.96])
    data[121,:] = np.array([317, 1.03])
    data[122,:] = np.array([318, 0.93])
    data[123,:] = np.array([319, 1.08])
    data[124,:] = np.array([320, 1.00])
    
    #Convert from 10^-2 m^-1 to cm^-1
    data[:,1] *= (1e-4) 
    
    np.savetxt("./Processed-Data/quickenden.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="Pure Water from Quickenden 1980\nWavelength (nm), Absorptivities (cm^-1)")
     
def process_cleaves_gelbstoff():
    """
    Purpose of this function is to process absorptivities from Cleaves and Miller 1998 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named cleaves_gelbstoff.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of cm^-1#
    """

    data = zeros((36,2))
    data[0,:] = np.array([210, 8.8947])
    data[1,:] = np.array([212, 8.5941])
    data[2,:] = np.array([214, 8.2720])
    data[3,:] = np.array([216, 7.9284])
    data[4,:] = np.array([218, 7.6493])
    data[5,:] = np.array([220, 7.3916])
    data[6,:] = np.array([223, 7.1302])
    data[7,:] = np.array([225, 6.8888])
    data[8,:] = np.array([228, 6.6313])
    data[9,:] = np.array([231, 6.3577])
    data[10,:] = np.array([234, 6.0841])
    data[11,:] = np.array([237, 5.8266])
    data[12,:] = np.array([239, 5.5691])
    data[13,:] = np.array([242, 5.2795])
    data[14,:] = np.array([245, 5.0381])
    data[15,:] = np.array([247, 4.7645])
    data[16,:] = np.array([250, 4.5070 ])
    data[17,:] = np.array([254, 4.2817])
    data[18,:] = np.array([257, 4.0885])
    data[19,:] = np.array([260, 3.9437])
    data[20,:] = np.array([263, 3.8150])
    data[21,:] = np.array([266, 3.7345])
    data[22,:] = np.array([269, 3.6379])
    data[23,:] = np.array([272, 3.5414])
    data[24,:] = np.array([275, 3.4126])
    data[25,:] = np.array([278, 3.2839])
    data[26,:] = np.array([281, 3.2195])
    data[27,:] = np.array([283, 3.1068])
    data[28,:] = np.array([286, 3.0103])
    data[29,:] = np.array([289, 2.9137])
    data[30,:] = np.array([293, 2.8011])
    data[31,:] = np.array([296, 2.7206])
    data[32,:] = np.array([300, 2.6562])
    data[33,:] = np.array([303, 2.6079])
    data[34,:] = np.array([306, 2.5597])
    data[35,:] = np.array([310, 2.4953])
 
    #Convert from absorbance (cm^-1) to molar absorptivity (M^-1 cm^-1)
    data[:,1] /= (0.0275) #carbon concentration of 330 mg/L, or 0.0275 M

    np.savetxt("./Processed-Data/cleaves_gelbstoff.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="Gelbstoff (organic material) from Cleaves 1998\nWavelength (nm), Molar Absorptivities ( M^-1 cm^-1)")

def process_hayon_hso3():
    
    """
    Purpose of this function is to process absorptivities for bisulfite from Hayon et al 1971 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named hayon_hso3.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of cm^-1#
    """

    data = zeros((37,2))
    data[0,:] = np.array([212, 1.4171])
    data[1,:] = np.array([213, 1.2734])
    data[2,:] = np.array([214, 1.1524])
    data[3,:] = np.array([214, 1.0450])
    data[4,:] = np.array([215, 0.9285])
    data[5,:] = np.array([216, 0.7273])
    data[6,:] = np.array([217, 0.6124])
    data[7,:] = np.array([218, 0.4566])
    data[8,:] = np.array([219, 0.3776])
    data[9,:] = np.array([220, 0.2970])
    data[10,:] = np.array([221, 0.2414])
    data[11,:] = np.array([223, 0.1756])
    data[12,:] = np.array([225, 0.1257])
    data[13,:] = np.array([227, 0.0815])
    data[14,:] = np.array([230, 0.0500])
    data[15,:] = np.array([233, 0.0413])
    data[16,:] = np.array([237, 0.0588])
    data[17,:] = np.array([240, 0.0967])
    data[18,:] = np.array([243, 0.1380])
    data[19,:] = np.array([246, 0.1827])
    data[20,:] = np.array([249, 0.2195])
    data[21,:] = np.array([252, 0.2449])
    data[22,:] = np.array([256, 0.2522])
    data[23,:] = np.array([260, 0.2424])
    data[24,:] = np.array([263, 0.2268])
    data[25,:] = np.array([267, 0.2043])
    data[26,:] = np.array([270, 0.1764])
    data[27,:] = np.array([273, 0.1495])
    data[28,:] = np.array([277, 0.1226])
    data[29,:] = np.array([280, 0.0990])
    data[30,:] = np.array([283, 0.0765])
    data[31,:] = np.array([286, 0.0497])
    data[32,:] = np.array([290, 0.0272])
    data[33,:] = np.array([293, 0.0119])
    data[34,:] = np.array([296, 0.0050])
    data[35,:] = np.array([293, 0.])
    data[36,:] = np.array([296, 0.])
    
    #Converting from absorbance to molar absorptivity (M^-1 cm^-1)
    data[:,1] /= (0.1 * 0.1) #concentration of 0.1 M, pathlength 1 mm (0.1 cm)

    np.savetxt("./Processed-Data/hayon_hso3.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="Bisulfite from Hayon 1971\nWavelength (nm), Molar Absorptivities ( M^-1 cm^-1)")

def process_hayon_so3():

    """
    Purpose of this function is to process absorptivities of sulfite from Hayon 1971 into standard format
    Takes: nothing
    Returns: nothing
    Outputs: 2 column file named hayon_so3.dat. Column 1 is wavelength in nm, column 2 is molar absorptivitiy in units of M^-1 cm^-1#
    """
    
    data = zeros((37,2))
    data[0,:] = np.array([202, 3.8044])
    data[1,:] = np.array([204, 3.7473])
    data[2,:] = np.array([206, 3.6873])
    data[3,:] = np.array([208, 3.6272])
    data[4,:] = np.array([211, 3.5672])
    data[5,:] = np.array([213, 3.4985])
    data[6,:] = np.array([215, 3.4241])
    data[7,:] = np.array([217, 3.3525])
    data[8,:] = np.array([218, 3.2924])
    data[9,:] = np.array([220, 3.2237])
    data[10,:] = np.array([222, 3.1458])
    data[11,:] = np.array([224, 3.0793])
    data[12,:] = np.array([225, 3.0152])
    data[13,:] = np.array([227, 2.9462])
    data[14,:] = np.array([228, 2.8702])
    data[15,:] = np.array([230, 2.7989])
    data[16,:] = np.array([231, 2.7251])
    data[17,:] = np.array([233, 2.6514])
    data[18,:] = np.array([234, 2.5777])
    data[19,:] = np.array([235, 2.5063])
    data[20,:] = np.array([237, 2.4302])
    data[21,:] = np.array([238, 2.3521])
    data[22,:] = np.array([239, 2.2654])
    data[23,:] = np.array([241, 2.1806])
    data[24,:] = np.array([242, 2.0812])
    data[25,:] = np.array([243, 1.9909])
    data[26,:] = np.array([245, 1.9006])
    data[27,:] = np.array([246, 1.8212])
    data[28,:] = np.array([247, 1.7399])
    data[29,:] = np.array([248, 1.6622])
    data[30,:] = np.array([249, 1.5719])
    data[31,:] = np.array([250, 1.4779])
    data[32,:] = np.array([252, 1.3725])
    data[33,:] = np.array([253, 1.2674])
    data[34,:] = np.array([254, 1.1699])
    data[35,:] = np.array([255, 1.0773])
    data[36,:] = np.array([256, 1.0022])

    #Converting from log of absorptivity to molar absorptivity (M^-1 cm^-1)
    data[:,1] = (10 ** data[:,1]) 

    np.savetxt("./Processed-Data/hayon_so3.dat", data, delimiter=",", newline="\n", fmt="%3.1f %1.6e", header="Sulfite from Hayon 1971\nWavelength (nm), Molar Absorptivities ( M^-1 cm^-1)")

process_hayon_hso3()











































